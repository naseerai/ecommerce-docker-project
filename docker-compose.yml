version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend Services
  user-service:
    build: ./backend/user-service
    container_name: ecommerce-user-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ecommerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - JWT_SECRET=your-secret-key
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  product-service:
    build: ./backend/product-service
    container_name: ecommerce-product-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ecommerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  cart-service:
    build: ./backend/cart-service
    container_name: ecommerce-cart-service
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3003:3003"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: ecommerce-frontend
    environment:
      - REACT_APP_API_BASE=http://localhost
    ports:
      - "3000:80"
    depends_on:
      - user-service
      - product-service
      - cart-service
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
      - user-service
      - product-service
      - cart-service
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge
