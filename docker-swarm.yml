version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    deploy:
      replicas: 1

  user-service:
    image: ${DOCKER_REGISTRY:-localhost:5000}/user-service:latest
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - ecommerce-network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  product-service:
    image: ${DOCKER_REGISTRY:-localhost:5000}/product-service:latest
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - ecommerce-network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  cart-service:
    image: ${DOCKER_REGISTRY:-localhost:5000}/cart-service:latest
    environment:
      - REDIS_HOST=redis
    networks:
      - ecommerce-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  frontend:
    image: ${DOCKER_REGISTRY:-localhost:5000}/frontend:latest
    networks:
      - ecommerce-network
    deploy:
      replicas: 2

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.swarm.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - ecommerce-network
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == manager]

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce-network:
    driver: overlay
    attachable: true
